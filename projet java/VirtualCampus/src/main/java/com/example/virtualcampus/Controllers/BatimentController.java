package com.example.virtualcampus.Controllers;


import com.example.virtualcampus.dao.BatimentDAO;
import com.example.virtualcampus.Model.Batiment;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.GridPane;
import javafx.geometry.Insets;
import java.util.Optional;

public class BatimentController {
    @FXML private TableView<Batiment> batimentTable;
    @FXML private TableColumn<Batiment, Integer> batimentId;
    @FXML private TableColumn<Batiment, String> batimentNom;
    @FXML private TableColumn<Batiment, String> batimentType;
    @FXML private TableColumn<Batiment, Integer> batimentCapacite;
    @FXML private TableColumn<Batiment, Double> batimentWifi;
    @FXML private TableColumn<Batiment, Double> batimentElect;
    @FXML private TableColumn<Batiment, Double> batimentEau;
    @FXML private TableColumn<Batiment, Integer> batimentImpact;

    private BatimentDAO batimentDAO = new BatimentDAO();

    @FXML
    public void initialize() {
        setupTableColumns();
        loadDataFromDatabase();
    }

    private void setupTableColumns() {
        batimentId.setCellValueFactory(new PropertyValueFactory<>("id"));
        batimentNom.setCellValueFactory(new PropertyValueFactory<>("nom"));
        batimentType.setCellValueFactory(new PropertyValueFactory<>("type"));
        batimentCapacite.setCellValueFactory(new PropertyValueFactory<>("capacite"));
        batimentWifi.setCellValueFactory(new PropertyValueFactory<>("wifiConsommation"));
        batimentElect.setCellValueFactory(new PropertyValueFactory<>("electriciteConsommation"));
        batimentEau.setCellValueFactory(new PropertyValueFactory<>("eauConsommation"));
        batimentImpact.setCellValueFactory(new PropertyValueFactory<>("impactSatisfaction"));
    }

    private void loadDataFromDatabase() {
        ObservableList<Batiment> batimentData = FXCollections.observableArrayList();
        batimentData.addAll(batimentDAO.getAllBatiments());
        batimentTable.setItems(batimentData);
    }

    @FXML
    private void handleAddBatiment() {
        Dialog<Batiment> dialog = new Dialog<>();
        dialog.setTitle("Ajouter un Batiment");
        dialog.setHeaderText("Entrez les détails du batiment");

        // Set the button types
        ButtonType saveButtonType = new ButtonType("Sauvegarder", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(saveButtonType, ButtonType.CANCEL);

        // Create the form grid
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 150, 10, 10));

        TextField nomField = new TextField();
        // Create ComboBox for type
        ComboBox<String> typeComboBox = new ComboBox<>();
        typeComboBox.getItems().addAll("SalleCours", "Bibliotheque", "Cafeteria", "Laboratoire");
        typeComboBox.setValue("SalleCours"); // Set default value

        TextField capaciteField = new TextField();
        TextField wifiField = new TextField();
        TextField electField = new TextField();
        TextField eauField = new TextField();
        TextField impactField = new TextField();

        grid.add(new Label("Nom:"), 0, 0);
        grid.add(nomField, 1, 0);
        grid.add(new Label("Type:"), 0, 1);
        grid.add(typeComboBox, 1, 1);
        grid.add(new Label("Capacité:"), 0, 2);
        grid.add(capaciteField, 1, 2);
        grid.add(new Label("Consommation Wifi:"), 0, 3);
        grid.add(wifiField, 1, 3);
        grid.add(new Label("Consommation Electricité:"), 0, 4);
        grid.add(electField, 1, 4);
        grid.add(new Label("Consommation Eau:"), 0, 5);
        grid.add(eauField, 1, 5);
        grid.add(new Label("Impact Satisfaction:"), 0, 6);
        grid.add(impactField, 1, 6);

        dialog.getDialogPane().setContent(grid);

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == saveButtonType) {
                try {
                    Batiment newBatiment = new Batiment(
                            0, // ID will be generated by database
                            nomField.getText(),
                            typeComboBox.getValue(), // Get selected value from ComboBox
                            Integer.parseInt(capaciteField.getText()),
                            Double.parseDouble(wifiField.getText()),
                            Double.parseDouble(electField.getText()),
                            Double.parseDouble(eauField.getText()),
                            Integer.parseInt(impactField.getText())
                    );
                    batimentDAO.addBatiment(newBatiment);
                    loadDataFromDatabase(); // Refresh table
                    return newBatiment;
                } catch (NumberFormatException e) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Erreur");
                    alert.setHeaderText("Erreur de saisie");
                    alert.setContentText("Veuillez vérifier les valeurs numériques");
                    alert.showAndWait();
                    return null;
                }
            }
            return null;
        });

        dialog.showAndWait();
    }

    @FXML
    private void handleEditBatiment() {
        Batiment selectedBatiment = batimentTable.getSelectionModel().getSelectedItem();
        if (selectedBatiment == null) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Aucune Sélection");
            alert.setHeaderText("Aucun Batiment Sélectionné");
            alert.setContentText("Veuillez sélectionner un batiment dans le tableau.");
            alert.showAndWait();
            return;
        }

        Dialog<Batiment> dialog = new Dialog<>();
        dialog.setTitle("Modifier un Batiment");
        dialog.setHeaderText("Modifier les détails du batiment");

        ButtonType saveButtonType = new ButtonType("Sauvegarder", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(saveButtonType, ButtonType.CANCEL);

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 150, 10, 10));

        TextField nomField = new TextField(selectedBatiment.getNom());
        TextField typeField = new TextField(selectedBatiment.getType());
        TextField capaciteField = new TextField(String.valueOf(selectedBatiment.getCapacite()));
        TextField wifiField = new TextField(String.valueOf(selectedBatiment.getWifiConsommation()));
        TextField electField = new TextField(String.valueOf(selectedBatiment.getElectriciteConsommation()));
        TextField eauField = new TextField(String.valueOf(selectedBatiment.getEauConsommation()));
        TextField impactField = new TextField(String.valueOf(selectedBatiment.getImpactSatisfaction()));

        grid.add(new Label("Nom:"), 0, 0);
        grid.add(nomField, 1, 0);
        grid.add(new Label("Type:"), 0, 1);
        grid.add(typeField, 1, 1);
        grid.add(new Label("Capacité:"), 0, 2);
        grid.add(capaciteField, 1, 2);
        grid.add(new Label("Consommation Wifi:"), 0, 3);
        grid.add(wifiField, 1, 3);
        grid.add(new Label("Consommation Electricité:"), 0, 4);
        grid.add(electField, 1, 4);
        grid.add(new Label("Consommation Eau:"), 0, 5);
        grid.add(eauField, 1, 5);
        grid.add(new Label("Impact Satisfaction:"), 0, 6);
        grid.add(impactField, 1, 6);

        dialog.getDialogPane().setContent(grid);

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == saveButtonType) {
                try {
                    Batiment updatedBatiment = new Batiment(
                            selectedBatiment.getId(),
                            nomField.getText(),
                            typeField.getText(),
                            Integer.parseInt(capaciteField.getText()),
                            Double.parseDouble(wifiField.getText()),
                            Double.parseDouble(electField.getText()),
                            Double.parseDouble(eauField.getText()),
                            Integer.parseInt(impactField.getText())
                    );
                    batimentDAO.updateBatiment(updatedBatiment);
                    loadDataFromDatabase(); // Refresh table
                    return updatedBatiment;
                } catch (NumberFormatException e) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Erreur");
                    alert.setHeaderText("Erreur de saisie");
                    alert.setContentText("Veuillez vérifier les valeurs numériques");
                    alert.showAndWait();
                    return null;
                }
            }
            return null;
        });

        dialog.showAndWait();
    }

    @FXML
    private void handleDeleteBatiment() {
        Batiment selectedBatiment = batimentTable.getSelectionModel().getSelectedItem();
        if (selectedBatiment == null) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Aucune Sélection");
            alert.setHeaderText("Aucun Batiment Sélectionné");
            alert.setContentText("Veuillez sélectionner un batiment dans le tableau.");
            alert.showAndWait();
            return;
        }

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation de Suppression");
        alert.setHeaderText("Supprimer le Batiment");
        alert.setContentText("Êtes-vous sûr de vouloir supprimer le batiment: " + selectedBatiment.getNom() + "?");

        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            batimentDAO.deleteBatiment(selectedBatiment.getId());
            loadDataFromDatabase(); // Refresh table
        }
    }
}
